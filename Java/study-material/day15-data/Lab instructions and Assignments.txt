Day 1
1. Refer to "Installation Instructions" from day1-data\day1_help & complete the same.

2. MUST go through "day1-data\day1_help\day1_sequence.rtf" and  from day1-data\day1_help\ & day1-data\day1_help\slides\PPTDay1.pdf
(only till whatever  we have covered)

3. Go through  code samples from day1-data\code\src

4. Solve (Hands on)

4.1 Display food menu to user. User will select items from menu along with the quantity. (eg 1. Dosa 2. Samosa 3. Idli ... 10 . Generate Bill ) Assign fixed prices to food items(hard code the prices)
When user enters 'Generate Bill' option(10) , display total bill & exit.
OR 
Create java application for the following
Accept 2 numbers from user & operation to perform
1. Add 2.Subtract 3. Multiply 4.Divide 5.Exit
Display the result of the operation. 
Java app must continue to run till user chooses exit option.


Day 2

1. MUST revise from today's sequence ("day2-data\day2_help\day2-sequence.rtf") n
refer : day2-data\code
1.1 Revise :  mem pics for Java data areas(stack,heap,method area),
1.2 Garbage collection introduction

1.3 refer : day1-data\day1_help\diagrams\different type of vars.png


1.4 
 Solve this (Discuss memory picture)
Given : Box class is compiled.
In main method  of TestBox
Box b1=new Box(1,2,3);
b1++;
Box b2=b1;
b1=new Box(3,4,5);
//any objects marked for garbage collection ? how many ? 
Box b3=b1;
b2=new Box(4,5,6);
//any objects marked for garbage collection ? how many ?


2. Solve Tank assignment along with memory picture.

What will be the output ?

class Tank {
  private int level;
  Tank(int l)
   {
     level=l;
   }
  public void setLevel(int level1)
  {
    level=level1;
  }
  public int getLevel()
  {
    return level;
  }
}	

public class Assignment {
  public static void main(String[] args) {
    Tank t1 = new Tank(10);
    Tank t2 = new Tank(20);
     s.o.p("1: t1.level: " + t1.getLevel() +
          ", t2.level: " + t2.getLevel());
    t1 = t2;//1st tank obj is marked GC
    s.o.p("2: t1.level: " + t1.getLevel() +
          ", t2.level: " + t2.getLevel());
    t1.setLevel(27);
     s.o.p("3: t1.level: " + t1.getLevel() +
          ", t2.level: " + t2.getLevel());
    t2.setLevel(t1.getLevel()+10);
     s.o.p("4: t1.level: " + t1.getLevel() +
          ", t2.level: " + t2.getLevel());
  }
}
Are there any objects marked for GC ?

3. What will happen (solve ready code samples : along with mem pics )
day2-data\day2_help\params_passing
3.1 TestParamPassing1.java
3.2 TestParamPassing1.java

4. Hands on
(Currently place all the classes in the default un named package)

Create a  class Point2D   for representing a point in x-y co-ordinate system.

4.1 Create a parameterized constructor to accept x & y co-ords.

4.2 Add  show() method  --to return point's x & y co-ords
eg : public String show() {.....}

4.3 
Add a non static  , isEqual method to Point2D class : boolean returning method : must return true if both points are having same x,y co-ords or false otherwise.

How will you invoke it from the tester 
A Hint :  p1.isEqual(p2); 
OR
p2.isEqual(p1)

4.4 
Add a non static method , calculateDistance , to calc distance between 2 points
Hint : use distance formula.

eg : In Tester :
double distance=p1.calculateDistance(p2);

4.5  Create a separate Driver(main)  class(for UI )  , "TestPoint" , with main(..)

4.6  Accept x,y co-ordinates for 2 points n store the co-ordinates
4.7  Display x,y co-ordinates of both of the points plotted  (using show() method)
4.8  (Optional work)
Find out if the points  are same or different (Hint : isEqual)
Print the message accordingly. (print SAME or DIFFERENT)
If points are not same , display distance between these 2 points.



Day 3
1. Download and extract Eclipse IDE with Spring (STS - Spring tool Suite)
Refer - "day1-data\day1_help\Installation instructions for JDK n IDE.txt"

2. Refer to today's sequence - 
"day3-data\day3_help\day3-sequence.rtf"

3. Refer to  <day3.1> , to revise 
access specifiers , packages n classpath 

4. Modify yesterday's Point2D's assignment (This has to be done w/o IDE)
Re factor (modify) n add Point2D class under the package - com.developers.geometry
Add TestPoint class under the package - com.tester
Make necessary changes .
Ensure that user should be able to run com.tester.TestPoint class from anywhere.
Hint - set CLASSPATH


5. Start the IDE (STS 3.9.18 : Eclipse IDE with Spring plug in)
Create a new workspace for core java.
Import day3.2 , in your workspace
Revise : arrays of primitive type n array of references
for-each loop
for vs for-each loop

6. 
 Discuss - 
== vs isEqual
using Point2D scenario

7. More hands on (Continue in IDE)
(OPTIONAL)

7.1   Create a driver  class(for UI)  , in the "tester" package "TestPoints" , with main(..)

1. Prompt user , how many points to plot? 
Create suitable array. (Hint : array of references)

2. Show following options

Options : 
1. Plot a point
Inputs : array index , x  ,y
Check boundary conditions  n also check if some point is already plotted at the same index , if not then store the point details.
In case of any errors , display suitable error message.

2.   Display x,y co-ordinates of all the points plotted so far ,using for-each loop.

0. Exit 

Day 4

1. NO new solving assignments !

2. Complete pending work
(Point2d array based assignment)

3. import day4.1 eclipse project , to revise static keyword

4. import day4.2 eclipse project , to revise inheritance n run time polymorphism.
Very important to revise !

5. For those , who have completed earlier work , try guessing the o/p
day4-data\params_passing - TestParamPassing3.java , TestParamPassing4.java

Day 5

1. Answer this popular question 
How does this auto invoke ref.toString() ?
System.out.prinln(ref); 
Clue - java docs

2. Before completing the pending work , revise first.
2.1 import day5.1 to revise
inheritance , constructor invocation , upcasting , downcasting , instanceof checking , ClassCastException.

2.2 import day5.2 , to refer to bounded shapes hierarchy

2.3 Must go through 
today's sequence n readme "regarding instanceof"

3. Solve (Mandatory assignment)
Read complete assignment n then only solve.

1.1 Can you arrange Fruit,Apple,Orange,Mango in inheritance hierarchy ?
Use tight encapsulation.

1.2 Properties (instance variables)  in Fruit class-
 color : String , weight : double , name:String, isFresh : boolean

1.3 Add suitable constructor

1.4 Override  toString correctly to return state of all fruits (return only  - name ,color , weight )

1.5 Add a taste() method : public String taste()

For Fruit : Can you identify taste of any general fruit ? NO
So add a taste() with this definition : returns "no specific taste" 

Apple : should return  "sweet n sour"
Mango : should return  "sweet"
Orange : should return  "sour"

1.6 Add specific functionality , in the sub classes
In Mango : public void pulp() {Display name n color of the fruit + a mesg  creating  pulp!}
In Orange : public void juice() {Display name n weight of the fruit + a mesg extracting juice!}
In Apple : public void jam() {Display name of the fruit + a mesg  making jam!}

1.7 Add all of above classes under the package "com.app.fruits"
1.8 Create java application FruitBasket , with main method , as a tester
1.9 Prompt user for the basket size n create suitable data structure

1.10 Supply options
1. Add Mango
2. Add Orange
3. Add Apple
NOTE : You will be ALWAYS adding a fresh fruit in the basket , in all of above options.

3. Display names of all fruits in the basket.

4. Display name,color,weight , taste of all fresh fruits , in the basket.


5. Invoke fruit specific functionality (pulp / juice / jam)
i/p : index
Invoke correct functionality (pulp / juice / jam)

0. Exit 


Day 6

Refer to today's sequence (.rtf)

1. import day6.1 to revise abstract classes , along with the readme - "day6-data\day6_help\regarding abstraction.txt"

2. import day6.2 to revise interfaces , along with the readme - "day6-data\day6_help\interfaces_help\About interfaces.txt"

3. Complete Day 5 FruitBasket assignment.

4. Continue with the same.
4.1 Can you add abstraction in the Fruits scenario?
Answer is yes ! Do it.

4.2 Add these options
6. Mark a fruit in a basket , as stale(=not fresh)
i/p : index 
o/p : error message (in case of invalid index) 
In case of valid index - mark it stale

7. Mark all sour fruits stale 
Hint : Use equals() method of the String class.
(We haven't covered it yet. You can look at javadocs and try it)


Day 7
1. import day7.1 in your workspace n revise exception handling.
Mainly - custom exceptions , try , catch , throw , throws , try-with-resources

2. Solve
Validate PUC 
 Accept pollution level(1-100)  from user (scanner)
If level > 20 %
send alert : by  throwing suitable exception 
Use centralized exception handling

3. Complete pending work.

Day 8
Let's first do some hands on in the combined lab today.
1. Beginning of Banking case study, to support core banking operations on bank accounts.
1.1 Bank Account - account no(int), account type (SAVING|CURRENT|FD|LOAN) , balance (double) , customer first n last name , customer's dob(LocalDate)
Add suitable constructor n toString n equals
PK (UID) - account no


How to parse from String -> enum ?
Use compiler generated static method of the enum
public static BankAccountType valueOf(String s) throws IllegalArgumentException
Objectives 
Create a tester 
Accept bank a/c details from user.
Create bank a/c instance
Display it's details
Create one more bank a/c instance
Display it's details
Check if they are the SAME 
HOw will you do it ?



1.2 Design  the specification for core BankOperations
Hint - interface
Start with simple operations
openAccount
displayAllAccounts
1.3 Create implementation class

Add Validations - 
1.4 Add minimum balance validation rule
1.5 A/C type must be valid

Tester (Client - TestBanking)
UI with main(..) method , menu based application.
1. Open new bank account
2. Display all accounts
0. Exit

In the individual labs , 
1. import day8.1 to revise
string handling
Date Time Handling


Day 9
1. import day9.1
Refer to  the diagram -  	"day9-data\day9_help\diagrams\Banking App System design.png"
Understand the flow.
Attach debugger n trace the flow.

2. Solve 
2.1 Add 1 more validation rule
Bank Customer must be of 18 years or above , to be able to open the account.

2.2 Add 1 more operation
Fetch a/c summary
I/p - account no
o/p - a/c details or error message via exception.




Day 10 
Hands on -
1. Create association between Car and Engine class.
Is it a composition (Part of ) - strong association OR weak association (aggregation) ?
How will you impose it ?
Rule - You should not be able to create the instance of the Engine directly. 
It has to be associated with a car's instance.
1.1 Car - model (String) , price (double) , started : boolean
Add suitable constructor.
Getter to check the car's  started status.

1.2 Engine - power : int (eg 800 CC | 1200 CC | 1500 CC | 2000 CC....)
type - diesel or petrol or hybrid (string)
Methods -
public void start() n public void stop() 
start - check if the car has already started , print the message "Car is already started" , otherwise - print the message - "Starting the car now !" . Edit "started" flag

stop  - check if the car has already stopped , print the message "Car is already stopped" , otherwise - print the message - "Stopping the car now !" . Edit "started" flag

1.4 Create a Tester class , with main(...) method
Requirement is - to start and later stop the car.
How will you do it ?
You will need to show the car status also (started or stopped)

2. Create a generic class which store a pair of references.
Add setters n getters suitably.

2.1 Create a Tester class.
Create  a pair  to store - String n it's length.
Create a pair to store - a number (int) and it's square root.
Use setters to set the details n getters to access the details.

3. Continue with the banking assignment
import day10.1 n continue with the same OR you can continue with your solution as well.
Add these options
3.1 Deposit
i/p - account no , amount
3.2 Withdraw
i/p - account no , amount
3.3 Transfer Funds 
i/p - src account no , dest account no , amount

4. import day10.2 to revise
wrapper classes ,
nested class(inner class)
var-args
generics

Day 11 (Important day !)
1. import day11.1 in your workspace.
1.1 Revise List functionality.
1.2 Add new validation rule
The bank should not be allowed to store duplicate accounts
(i.e the accounts with the same account no)

1.3 Solve Funds transfer
User i/ps - src account no , dest account no , transfer amount

1.4 Sort bank accounts as per desc order of account balance.

1.5 Sort accounts as per asc order of DoB of customers (use anonymous inner class)

1.6 Display names of all account holders of specified account type
i/p - account type

1.7 Close account
i/p - account no

1.8 Close all accounts of the specified type , for the clients born after specified date.
i/p - account type n date.

2. Optional Work
Go through Customer management system case study. Start solving in easy steps
(It's a bigger assignment. So take your time understanding it n then solve )

3. In the individual labs , every one MUST revise 
Collection Framework overview 
List features n implementation classes
CRUD , searching , sorting.


Day 12
1. import day12.1 (has Banking App)
1.1 case 8 (option 8)
Revise it to understand custom ordering using anonymous inner class
1.2 Revise Iterator n ListIterators
1.3 Go through ready code samples for LinkedList
"day12-data\day12_help\linked_list\code"

1.4 import day12.2 , to revise Sets handling
HashSet vs LinkedHashSet vs TreeSet

Revise TestEmpSet to look at hashCode and equals method.
We have just started it's discussion. 
It will be continued in the next week.


2. Try n complete , following options - 
1.6 , 1.7 and 1.8 from Day 11 assignment


3. Solve 
What will happen ?
Compile time error
Run time error
If no errors , guess the o/p

String[] names= {"one","two","three","four","five"};
ArrayList<String> strings=new ArrayList<>();
for(String s : names)
 strings.add(s); 
for(int i=0;i<strings.size();i++)
 strings.remove(i);
System.out.println(strings);

4. Please use the weekend effectively to complete revision n pending work in 2nd week of Java.

Day 13
1. Start by implementing customer case study (with minimum validations) using Maps.

2. Solve more examples in generic syntax.

3. In the individual labs -
3.1 import day13.1 to revise 
Hashing algorithm with HashSet (overriding of equals n hashCode)
Banking case study implemented in Maps

3.2 import day13.2 to revise
Generic methods



Day 14
Let's start with functional programming first with code samples 
1. Solve 
1.1 Copy ready code in the project - day14_lab
Using lambda expression (anonymous function)
1.2 Display all products from the product list.
1.3 Increase prices of all products by 10
1.4 Remove all the products from the specified category
1.5 Remove all the products from the specified category , manufactured before specified date.
1.6 Display all products from the product map

1.7 Sort the products from the Map , as per price.


2. Revise advanced generics with code samples.
2.1 Write a method to Find max number from List of any type (integer / float / double /string / LocalDate ) n return it to the caller.

Test cases - ArrayList<Integer>
Vector<Float> , LinkedList<Double>, ArrayList<LocalDate> , LinkedList<String> , ArrayList<Emp> .....

2.2 Write a method to Find max number from List of any number (integer / float / double  ) n return it to the caller.
Test cases - ArrayList<Integer>
Vector<Float> , LinkedList<Double>, ArrayList<Long>

2.3 Write a method to print taste() of Collection of any fruit
Test Cases - ArrayList<Apple> , HashSet<Orange> , TreeSet<Mango> ...

2.4 Write a method to Find sum of all numbers  from List of any numbers (integer / float / double  ) n return it to the caller.
Test cases - ArrayList<Integer>
Vector<Float> , LinkedList<Double>, ArrayList<Long>


3. In the individual labs , try n complete today's objectives first

4. import day14.1 to revise -
advanced generic syntax
functional programming


Day 15

1. import day15.1 , to revise advanced generic syntax.

2. Consider typical Fruit inheritance hierarchy
(Fruit, Apple ,Mango , Orange)
Write a method to add ANY Fruit(Apple ,Mango , Orange) to the FruitBasket(any List)


3. New Scenario - Student HAS-A Address n Student HAS-A Subject
Refer - "day15-data\day15_help\extra help\ready code2"

3.0 Display all student details from the student map.

3.1 Display student details of the students who have taken a specified subject 

3.2 Print sum of  marks of students of all students from the specified state
i/p : name of the state

3.3 Print name of specified subject  topper
i/p : subject name

3.4 Print no of  failures for the specified subject chosen  from user.
i/p : subject name
(failure is GPA < 5.0)

3.5 Display names of students enrolled in a specified subject , securing marks > specified marks
i/p : subject name , marks

3.6 Suppose a subject faculty is unavailable n then subject is cancelled . Collect the specified subject students into the list n display it.
i/p : subject name

3.7 Display  student details for specified subject , sorted as per DoB

4. Revise Functional Streams -
4.1 Solve for extra practice -
"day15-data\day15_help\extra help\ready code1\strms"
TestExecOrder.java
TestExecOrder2.java
TestMe.java

5. import day15.2 to revise functional streams

6. import day15.3 to revise Text file handling














