{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Verdana;}{\f1\fnil Verdana;}}
{\colortbl ;\red127\green0\blue85;\red0\green0\blue0;\red106\green62\blue62;}
{\*\generator Riched20 10.0.22621}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\b\f0\fs28\lang9 WHY Java ?\par
\b0 1. Platform or architecture independent\par
(Write once run anywhere!) \par
This will be explained in detail , later with example.\par
2. Simple & robust\par
3. Secure\par
4. Automatic memory management.\par
5. Inherent Multi threaded support\par
6. Object Oriented support -- Encapsulation,Inheritance & polymorphism , abstraction\par
7. Excellent I/O support\par
8. Inherent networking support for TCP/IP , UDP/IP programming & for URLs\par
9. Supports Functional programming\par
10. Supports web programming\par
\par
\b Development & Execution of java application\b0 .\par
Objective 1 :  Create a java appln to display welcome message on the console.\par
\par
Steps (without IDE)\par
1. Create a folder under Java workspace\par
eg : day1\par
2. Create 2 sub folders : src n bin\par
src : for Java src files\par
bin : for .class files\par
3. Write Java src file under src.\par
class First \{\par
 public static void main(String[] args)\par
 \{\par
   System.out.println("Hello Java !");\par
 \}\par
\}\par
Explanation - \par
The default package - java.lang\par
System - name of the class\par
out - static data member (PrintStream - class) of the System class\par
 System.out => standard o/p stream (equivalent to printf | cout)\par
System.in => standard i/p stream (equivalent to scanf | cin)\par
print | println | printf - overloaded methods of PrintStream class\par
argument of main : String[] args - representin cmd line arguments. (argv)\par
\par
4. How to compile ?\par
\par
Open cmd prompt in a folder : <day1>/src\par
javac -d ..\\bin HelloWorld.java\par
Option -d => name of the folder , to place .class files.\par
\par
5. How to run / launch java program(application) ?\par
cd ..\\bin\par
java HelloWorld\par
(syntax - java Name of the class containing main method)\par
\b Understand the platform independence.\par
\b0 (Refer : "Java application development.png" )\par
Later Test it on different platforms(eg : Linux | Mac)\par
\par
Objective 2 :  Write Java application , to say hello to user. User name will be supplied as command line argument.\par
(eg : java SayHello Madhura\par
O/P Hello , Madhura !)\par
\par
\b 3. JDK , JRE & JVM (refer to diagram - JDK vs JRE vs JVM)\par
\b0\par
4. \b Naming conventions in Java \b0\par
1. For the class  names-  1st letter of 1st word must start with upper case & then follow camel case notation.\par
eg : HelloWorld\par
2. For data members or methods(functions) -  1st letter of 1st word must start with lower case  & then follow camel case notation\par
eg : performanceIndex\par
calculateSalary()\par
3. constants -- all uppercase.\par
eg : PI\par
5\b . Rules on Identifiers\b0\par
1. Identifiers must start with a letter, a currency character ($), or a connecting character such as the underscore ( _ ),  cannot start with a number!\par
2. Can't use a Java keyword as an identifier. \par
3. They are Case sensitive \par
\par
6. \b Legal Access specifiers for data members n methods\b0\par
private : visible within the same class\par
default(package private) --no access modifier ---visible within same package(i.e same folder)\par
protected : accessible withing the same package & accessible to sub classess via inheritance\par
public : accessible from anywhere.\par
\par
7. \b Legal class level access specifiers \b0 - \par
1. default(scope=current package only)\par
OR\par
2. public (scope=accessible from any where)\par
Objective 3 : Accept 2 numbers as command line args , add them & display the result.\par
\par
8.Explore Java API documentation (java docs)\par
java.lang  is the default package  name.\par
In java.lang package , Integer is a built in class \par
It's method -\par
public static int parseInt(String s) throws NumberFormatException\par
Input (i/p) - String\par
Output (o/p) - int \par
It will raise(throw) run time error(exception) , in case of un parseable integers.\par
\b Tip\b0   \par
Refer to java docs for any explanation of classes/methods..\par
8. \b Introduce Scanner class \b0 from java.util package\par
What is Scanner ?\par
A class (java.util.Scanner)  that represents text based parser(It has inherent small ~ 1K buffer)\par
It can parse text data from any source --Console input,Text file , socket, string\par
Steps for attaching scanner , to accept inputs from User.(UI) \par
1. import java.util.*; or import java.util.Scanner;\par
2. Create instance of Scanner class(object)  using Scanner class constructor\par
public  Scanner (InputStream in)\par
System.in represents  standard input (stdin , similar to cin)\par
usage -- Scanner sc=new Scanner(System.in);\par
3. Some methods of the Scanner class , to check data type \par
public boolean hasNextInt(),\par
public boolean hasNextByte(),\par
public boolean hasNextLong()\par
4. To actually read n parse data\par
public int nextInt() throws InputMismatchException\par
public double nextDouble() throws InputMismatchException\par
public boolean nextBoolean() throws InputMismatchException\par
To read the next token -\par
public String next() throws NoSuchElementException\par
To read next line - \par
public String nextLine() throws NoSuchElementException\par
\par
5. Before terminating application close scanner.\par
public void close();\par
Objective 4 : Accept 2 double values as user input ,divide them & display the result.\par
\par
Objective 5 : Accept 2 int values as user input n compare them\par
If num1 < num2 , display mesg (1st no is < 2nd no)\par
If num1 > num2 , display mesg (1st no is > 2nd no)\par
If num1 == num2 , display mesg (1st no is same as 2nd no)\par
\par
Objective 6 : Accept begin n end value from user(using scanner)\par
Print all odd numbers in the range.\par
\par
Objective 7 : (while , switch-case)\par
Write java application , to accept month no from user , using Scanner\par
(Range 1-12 => Jan -Dec)\par
Display the name of a season accordingly\par
11,12,1,2 : Winter\par
3,4,5,6 : Summer\par
7,8,9,10 : Monsoon\par
The program should exit , with error message , if user enters the invalid month no)\par
\par
Objective 9: Write java application to accept int(emp id) , double(salary) , emp's first name(string) , is permanent :  boolean from Scanner & display the same using printf\par
\par
9. \b Basic rules \b0\par
1. Java compiler doesn't allow accessing of un initialized data members.\par
Test it !\par
\par
2. A java source file can have more than one non public class(default)\par
NOTE : All access specifiers in java : private , default(no modifier) , protected , public\par
Legal Access specifiers for classes : default(no modifier) OR public\par
\par
3. Files with no public classes(default scoped) can have a name that does not match with any of the classes in the file .\par
Test it !\par
 \par
4. There can be only one public class per source code file.\par
\par
5. If there is a public class in a file, the name of the file must match the name\par
of the public class. \par
For example, a class declared as public class Example \{....\}\par
must be in a source code file named Example.java.\par
\par
10. \b Java Data Types \b0\par
refer to diagram from the slide\par
\par
1. primitive data types \par
boolean,char,byte,short,long,float,double\par
\par
eg : 25\par
Hex : 0x19\par
Binary representation : 0001 1001\par
\par
eg : -25 \par
2's complement = 1's complement + 1\par
\par
1110 0110  1's complement\par
              1\par
-------------\par
1110 0111\par
\par
Byte range : -2^7 --- 2^7-1 (-128  127)\par
\par
\par
2. reference types\par
class type , array type , interface type\par
\par
Pointers vs java references\par
 Pointer arithmatic is not allowed in java.\par
reference --- holds internal representation of address (equivalent to object pointer in c++)\par
\par
11. \b Conversions regarding primitive types\b0\par
\par
Automatic conversions , also know as widening or Automatic promotions\par
1. byte--->short--->int---> long--->float--->double\par
eg - byte b1=100;\par
       short s1=b1;\par
2. char ---> int\par
    eg -\par
\cf1\b\f1 char\cf2\b0  \cf3 ch\cf2 =65\f0\lang16393 ;\par
\cf1\b\f1\lang9 int\cf2\b0  \cf3 i\cf2 =\cf3 ch\cf2 ++;\par
\tab\cf0\f0\par
3. long to float conversion(since float data type can hold larger range of values than long data type)\par
\b What are the rules ?\par
\b0 Source & destination operand types must be compatible. Typically destination data type must be able to store larger magnitude of values than that of src data type.\par
\par
1. Any arithmetic operation involving byte or short will be   automatically promoted to int\par
2. With int & long operands , resulting data type is  long\par
3. With long & float , resulting data type is  float\par
4. With byte,short,int , long , float & double, resulting data type is  double.\par
\par
\b Narrowing conversion \b0 is also known as  forced conversion or type-casting. It has to be applied by programmer (javac can not perform it automatically)\par
eg - \par
double ---> int \par
float --> long\par
double ---> float \par
\par
Revise operators & control structures from : PPTDay1\par
}
 